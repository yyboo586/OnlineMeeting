// =================================================================================
// This file is auto-generated by the GoFrame CLI tool. You may modify it as needed.
// =================================================================================

package dao

import (
	"OnlineMeeting/internal/meeting/dao/internal"
	"OnlineMeeting/internal/meeting/model/entity"
	"context"
	"fmt"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/errors/gerror"
)

// tMeetingParticipantDao is the data access object for the table t_meeting_participant.
// You can define custom methods on it to extend its functionality as needed.
type tMeetingParticipantDao struct {
	*internal.TMeetingParticipantDao
}

var (
	// TMeetingParticipant is a globally accessible object for table t_meeting_participant operations.
	TMeetingParticipant = tMeetingParticipantDao{internal.NewTMeetingParticipantDao()}
)

// Add your custom methods and functionality below.
func (t *tMeetingParticipantDao) GetByRoomNumber(ctx context.Context, roomNumber string) (res []*entity.MeetingParticipantDB, err error) {
	m := t.Ctx(ctx).Where(TMeetingParticipant.Columns().MRoomNumber, roomNumber)
	res = make([]*entity.MeetingParticipantDB, 0)
	if err = m.Scan(&res); err != nil {
		return nil, gerror.New(fmt.Sprintf("tMeetingParticipantDao.GetByRoomNumber: %v", err.Error()))
	}
	return
}

func (t *tMeetingParticipantDao) GetByUserID(ctx context.Context, userID string) (res []*entity.MeetingParticipantDB, err error) {
	m := t.Ctx(ctx).Where(TMeetingParticipant.Columns().UserId, userID)
	res = make([]*entity.MeetingParticipantDB, 0)
	if err = m.FieldsEx(TMeetingParticipant.Columns().Id).Scan(&res); err != nil {
		return nil, gerror.New(fmt.Sprintf("tMeetingParticipantDao.GetByUserID: %v", err.Error()))
	}
	return
}

func (t *tMeetingParticipantDao) GetFieldsByRoomNumberAndUserID(ctx context.Context, roomNumber, userID string, fields []interface{}) (res []gdb.Value, err error) {
	res, err = t.Ctx(ctx).
		Fields(fields...).
		Where(TMeetingParticipant.Columns().MRoomNumber, roomNumber).
		Where(TMeetingParticipant.Columns().UserId, userID).
		Array()

	return
}

// GetRoleByRoomNumberAndUserID 获取某场会议某用户的角色
func (t *tMeetingParticipantDao) GetRoleByRoomNumberAndUserID(ctx context.Context, roomNumber, userID string) (role int, err error) {
	var val gdb.Value
	val, err = t.Ctx(ctx).
		Fields(TMeetingParticipant.Columns().Role).
		Where(TMeetingParticipant.Columns().MRoomNumber, roomNumber).
		Where(TMeetingParticipant.Columns().UserId, userID).
		Value()
	if err != nil {
		return
	}

	role = val.Int()

	return
}

func (t *tMeetingParticipantDao) CheckParticipantExists(ctx context.Context, roomNumber, userID string) (exists bool, err error) {
	m := t.Ctx(ctx).
		Where(TMeetingParticipant.Columns().MRoomNumber, roomNumber).
		Where(TMeetingParticipant.Columns().UserId, userID)
	count, err := m.Count()
	if err != nil {
		return
	}

	return count != 0, nil
}
